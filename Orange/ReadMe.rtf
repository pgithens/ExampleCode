{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ReadMe\
Assignment 8\
Rendering Realistic Orange\
\
The code in both the vertex shader and the fragment shader are both split into three if statements, one for each radio button option: texture only, texture and lighting, and texture, lighting, and bump mapping. \
\
In the vertex shader, the code for the texture only is identical to the code that was provided with the template. The code for the texture and lighting option first passes the texture coordinate to the fragment shader, then it calculates the vertex position and the light position. Then it calculates the vertex normal, and light and eye direction all in the eye space. Finally, gl_Position is calculated by multiplying the map matrix with a vec4 of the position information and 1.0 in the fourth spot.\
\
In the code for the texture, lighting, and bump map, it begins the same as the lighting only with the texture coordinates and the calculation of vertex position and light position. Then the vertex tangent, bitangent, and normal all al calculated in the eye space by normalizing the product of the a_Tangent, a_Bitangent, and a_normal with the 3 by 3 mv matrix. These values are then used to create the TBN matrix. The TBN matrix is multiplied by the light direction and eye direction both of which when they are in the eye state. This value is then passed to the fragment shader as the light and eye direction in the tangent space. The gl_position is the same as in the texture and light option.\
\
In the fragment shader, the texture only option is again identical to the template. The light only option normalizes the normal value and light and eye directions that it got from the vertex shader. These are then used to calculate the ambient diffuse and specular values, which are added together to get the fColor. The textureColor is calculated by passing the u_TextureSampler and v_TexCoord to the function texture2D. Then gl_FragColor is the vec4 of the first three values of the texture color and the fColor with an alpha value of 1.\
\
In the bump map option, the texture normal is calculated by using the texture2D function and passing the texture samplerNormal and the v_TexCoord, then the returned vec3 has all of its components adjusted so the values are between -1 and 1 instead of 0 and 1. Then the texture normal, the light direction and eye direction (both in the tangent space) are all normalized. These values are then used to calculate the ambient, diffuse, and specular values. the remainder of the bump is identical to the light option. \
\
The radio buttons are added at the end and they display the message \'93Texture\'94, \'93Texture + Light\'94, and \'93Texture + Light + Normal Map\'94.\
}